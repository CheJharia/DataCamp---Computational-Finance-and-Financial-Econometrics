{
    "contents" : "# Load the monthly Starbucks return data\n# \n# In this first lab, you will analyze the monthly stock returns of Starbucks (ticker: SBUX).\n# Let us get started by downloading the monthly return data from http://assets.datacamp.com/course/compfin/sbuxPrices.csv, and by using the read.csv (check the documentation or type ?read.table in the console to get the help file).\n# In the read.csv function, you should indicate that the data in the CSV file has a header (header argument) and that strings should not be interpreted as factors (stringsAsFactors argument).\n\n# Assign the URL to the CSV file\ndata_url = \"http://assets.datacamp.com/course/compfin/sbuxPrices.csv\"\n# Load the data frame using read.csv\nsbux_df = read.csv(data_url, header = TRUE, stringsAsFactors = F)\n# sbux_df should be a data frame object. Data frames are rectangular data objects that typically contain\n# observations in rows and variables in columns\n\n\n# Get a feel for the data\n# \n# Before you analyze return data, it is a good idea to have (at least) a quick look at the data. R has a number of functions that help you do that:\n#         The str function compactly displays the structure of an R object. It is arguably one of the most useful R functions.\n# The head and tail functions shows you the first and the last part of an R object, respectively.\n# The class function shows you the class of an R object.\n\nstr(sbux_df)\nhead(sbux_df,1)\ntail(sbux_df,1)\nclass(sbux_df$Date)\n\n\n\n# Extract the price data\n# \n# You can use square brackets to extract data from the sbux_df data frame like this sbux_df[rows, columns]. To specify which rows or columns to extract, you have several options:\n# sbux_df[1:5, \"Adj.Close\"]\n# sbux_df[1:5, 2]\n# sbux_df$Adj.Close[1:5].\n# These expressions will all extract the first five closing prices. If you do not provide anything for the rows (or columns), all rows (or columns) will be selected (e.g. sbux_df[,\"Adj.Close\"]). Check this yourself by typing the different options in the console!\n#         Note that in the above operations, the dimension information was lost. To preserve the dimension information, add the drop=FALSE argument.\n\n# The sbux_df data frame is already loaded in your work space\nsbux_df[1:5, \"Adj.Close\"]\nsbux_df[1:5, 2]\nsbux_df$Adj.Close[1:5, drop = F]\nclosing_prices = sbux_df[ , \"Adj.Close\", drop = F]\n\n\n\n# Find indices associated with the dates 3/1/1994 and 3/1/1995\n# \n# It will often be useful to select stock data between certain dates. Advanced users are advised to look at the xts package. However, base R also provides sufficient functionality to do this.\n# The which function returns the indices for which a condition is TRUE. For example: which(sbux_df$Date == \"3/1/1994\") returns the position of the date 3/1/1994, which indicates in this case the row number in the sbux_df data frame.\n\n# The sbux_df data frame is already loaded in your work space\n\n# Find indices associated with the dates 3/1/1994 and 3/1/1995\nindex_1 = which(sbux_df$Date == \"3/1/1994\")\nindex_2 = which(sbux_df$Date == \"3/1/1995\")\n\n# Extract prices between 3/1/1994 and 3/1/1995\nsome_prices = sbux_df[index_1:index_2, \"Adj.Close\"]        \n\n\n# Subset directly on dates\n# \n# The way you selected the data from a specific trading day in the previous exercise was not very convenient, right?\n# When you create a data frame that has the dates of the stock price as row names, you can select the price on a specific day much more easily. The sample code on the right creates a new data frame sbux_prices_df that has the trading days as row names. You can select the price on 3/1/1994 now simply with sbux_prices_df[\"3/1/1994\", 1].\n\n# Create a new data frame that contains the price data with the dates as the row names\nsbux_prices_df = sbux_df[, \"Adj.Close\", drop=FALSE]\nrownames(sbux_prices_df) = sbux_df$Date\nhead(sbux_prices_df)\n\n# With Dates as rownames, you can subset directly on the dates.\n# Find indices associated with the dates 3/1/1994 and 3/1/1995.\nprice_1 = sbux_prices_df[\"3/1/1994\", 1]\nprice_2 = sbux_prices_df[\"3/1/1995\", 1]\n        \n\n# Plot the price data\n# \n# R has powerful graphical capabilities. On the right, the Starbucks closing prices are plotted as a function of time. This plot was generated with plot(sbux_df$Adj.Close), the basic plotting function (more info in the documentation of plot).\n# However, we should be able to generate a nicer plot, right? For one thing, a line plot makes much more sense for price time series data.\n\n# Now add all relevant arguments to the plot function below to get a nicer plot\nplot(sbux_df$Adj.Close, \n     type = \"l\", \n     col = \"blue\", \n     lwd = 2, \n     ylab = \"Adjusted close\",\n     main = \"Monthly closing price of SBUX\")\nlegend(x='topleft',legend='SBUX', lty=1, lwd=2, col='blue')\n\n\n# Calculate simple returns\n# \n# If you denote by Pt the stock price at the end of month t, the simple return is given by: Rt=Pt−Pt−1Pt−1, the percentage price difference.\n# Your task in this exercise is to compute the simple returns for every time point n. The fact that R is vectorized makes that relatively easy. In case you would like to calculate the price difference over time, you can use sbux_prices_df[2:n,1] - sbux_prices_df[1:(n-1),1]. Think about why this indeed calculates the price difference for all time periods. The first vector contains all prices, except the price on the first day. The second vector contains all prices except the price on the last day. Given the fact that R takes the element-wise difference of these vectors, you get Pt−Pt−1 for every t.\n\n# The sbux_df data frame is already loaded in your work space\nsbux_prices_df = sbux_df[, \"Adj.Close\", drop=FALSE]\n\n# Denote n the number of time periods\nn = nrow(sbux_prices_df)\nsbux_ret = (sbux_prices_df[2:n,1]-sbux_prices_df[1:n-1,1])/sbux_prices_df[1:n-1,1]\n# Notice that sbux_ret is not a data frame object\nclass(sbux_ret)\n\n\n# Add dates to simple return vector\n# \n# The vector sbux_ret now contains the simple returns of Starbucks (well done!). It would be convenient to have the dates as names for the elements of that vector. Remember that the trading dates were in the first column of the sbux_df data frame. To set the names of a vector, you can use names(vector) = some_names.\n# Remember that we are dealing with closing prices. The first return in sbux_df is thus realized on the second day, or sbux_prices_df[2,1].\n\n# The sbux_df data frame is already loaded in your work space\nsbux_prices_df = sbux_df[, \"Adj.Close\", drop=FALSE]\n\n# Denote n the number of time periods:\nn = nrow(sbux_prices_df)\nsbux_ret = ((sbux_prices_df[2:n, 1] - sbux_prices_df[1:(n-1), 1])/sbux_prices_df[1:(n-1), 1])\n\n# Notice that sbux_ret is not a data frame object\nclass(sbux_ret)\n\n# Now add dates as names to the vector and print the first elements of sbux_ret to the console to check\nnames(sbux_ret) = sbux_df[2:n, 1]\nhead(sbux_ret)\n\n\n# Compute continuously compounded 1-month returns\n# \n# As you might remember from class, the relation between single-period and multi-period returns is multiplicative for single returns. That is not very convenient. The yearly return is for example the geometric average of the monthly returns.\n# Therefore, in practice you will often use continuously compounded returns. These returns have an additive relationship between single and multi-period returns and are defined as rt=ln(1+Rt), with Rt the simple return and rt the continuously compounded return at moment t.\n# Continuously compounded returns can be computed easily in R by realizing that rt=ln(Pt/Pt−1) and ln(Pt/Pt−1)=ln(Pt)−ln(Pt−1). In R, the log price can be easily computed through log(price). Notice how the log function in R actually computes the natural logarithm.\n\n# The sbux_df data frame is already loaded in your work space\nsbux_prices_df = sbux_df[, \"Adj.Close\", drop=FALSE]\n\n# Denote n the number of time periods:\nn = nrow(sbux_prices_df)\nsbux_ret = ((sbux_prices_df[2:n, 1] - sbux_prices_df[1:(n-1), 1])/sbux_prices_df[1:(n-1), 1])\n\n# Compute continuously compounded 1-month returns\nsbux_ccret = log(sbux_prices_df[2:n, 1]) - log(sbux_prices_df[1:(n-1), 1]) \n# Assign names to the continuously compounded 1-month returns\nnames(sbux_ccret) = sbux_df[2:n,1] \n# Show sbux_ccret\nhead(sbux_ccret)\n\n\n# Compare simple and continuously compounded returns\n# \n# You would like to compare the simple and the continuously compounded returns. \n# In the next exercise, you will do that by generating two graphs. \n# In this exercise, you will just have a quick look at the data. \n# It would be nice to have the simple and continuously compounded return next \n# to each other in a matrix, with n rows and two columns. \n# You can use the cbind function to paste the two vectors that contain both types of returns next to each other in a matrix.\n\n# The sbux_df data frame is already loaded in your work space\nsbux_prices_df = sbux_df[, \"Adj.Close\", drop=FALSE]\n\n# Denote n the number of time periods:\nn = nrow(sbux_prices_df)\nsbux_ret = ((sbux_prices_df[2:n, 1] - sbux_prices_df[1:(n-1), 1])/sbux_prices_df[1:(n-1), 1])\n\n# Compute continuously compounded 1-month returns\nsbux_ccret = log(sbux_prices_df[2:n,1]) - log(sbux_prices_df[1:(n-1),1])\nnames(sbux_ccret) = sbux_df[2:n,1]\nhead(sbux_ccret)\n\n# Compare the simple and cc returns\nhead(cbind(gisbux_ret, sbux_ccret))\n\n\n# Graphically compare the simple and continuously compounded returns\n\n# The simple returns (sbux_ret) and the continuously compounded returns (sbux_ccret) have been preloaded in your workspace\n\n# Plot the returns on the same graph\nplot(sbux_ret, type=\"l\", col=\"blue\", lwd=2, ylab=\"Return\",\n     main=\"Monthly Returns on SBUX\")\n\n# Add horizontal line at zero\nabline(h=0)\n\n# Add a legend\nlegend(x=\"bottomright\", legend=c(\"Simple\", \"CC\"), \n       lty=1, lwd=2, col=c(\"blue\",\"red\"))\n\n# Add the continuously compounded returns\n\nlines(sbux_ccret, type = \"l\", col=\"red\", lwd =\"2\")\n\n# Calculate growth of $1 invested in SBUX\n\n# The simple returns (sbux_ret) and the continuously compounded returns (sbux_ccret) have been preloaded in your workspace\n\n# Compute gross returns\nsbux_gret = sbux_ret + 1\n        \n# Compute future values\nsbux_fv = cumprod(sbux_gret)\n        \n# Plot the evolution of the $1 invested in SBUX as a function of time\nplot(sbux_fv, type=\"l\", col=\"blue\", lwd=2, ylab=\"Dollars\", \n     main=\"FV of $1 invested in SBUX\")\n\n",
    "created" : 1421764126448.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2003942378",
    "id" : "EE15B4C6",
    "lastKnownWriteTime" : 1421882921,
    "path" : "~/Documents/R/DataCamp - Computational Finance and Financial Econometrics/Ch1ReturnCalculations.R",
    "project_path" : "Ch1ReturnCalculations.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : true,
    "type" : "r_source"
}